[build-system]
requires = ["setuptools >= 74.1.2"]
build-backend = "setuptools.build_meta"


[project]
name = "scaffold"
requires-python = ">=3.11"
dynamic = ["version"]
dependencies = [
    "redis==5.1.1",
]
authors = [
    {name = "Rhys Deimel", email = "deimelr@hotmail.com"},
]
maintainers = [
    {name = "Rhys Deimel", email = "deimelr@hotmail.com"},
]
description = "Template repo for python projects"
readme =  "README.md"
license = {text = "MIT License"}

[project.optional-dependencies]
test = [
    "coverage==7.6.1",
    "docker==7.1.0",
    "pyspelling==2.10",
    "pytest==8.3.3",
    "tox==4.21.2",
]
lint = [
    "mypy==1.11.2",
    "ruff==0.6.9",
    "types-redis==4.6.0.20241004"
]
dev = [
    "scaffold[test,lint]",
    "mkdocs==1.6.1",
    "mkdocs-material==9.5.39",
    "mkdocstrings-python==1.11.1"
]
build = [
    "pyinstaller==6.10.0",
    "staticx==0.14.1",
]


[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
fail_under = 95
ignore_errors = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
omit = [
    "tests/conftest.py"
]


[tool.mypy]
exclude = [
    'venv/*',
    'build/*'
]

[[tool.mypy.overrides]]
# module is untyped
module = [
    "docker",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--doctest-modules"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "incremental",
]


[tool.ruff]
line-length = 100

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E4",  # pycodestyle errors 4xx
    "E7",  # pycodestyle errors 7xx
    "E9",  # pycodestyle errors 9xx
    "F",  # pyflakes
    "I",  # isoert,
    "N",  # pep8-naming
    "RUF", # ruff-specific rules
    "U",  # pyupgrade
]


[tool.setuptools.dynamic]
version = {attr = "scaffold.__version__"}


[tool.tox]
requires = ["tox>=4"]
env_list = ["clean", "lint", "type", "3.11", "report"]

[tool.tox.env_run_base]
description = "Run test under {base_python}"
# default minimum python version for the whole project
base_python = ["python3.11"]
deps = [
    "coverage==7.6.1",
    "docker==7.1.0",
    "pytest==8.3.3",
    "tox==4.21.2",
    "mypy==1.11.2",
    "ruff==0.6.9",
    "types-redis==4.6.0.20241004",
]
commands = [["coverage", "run", "-a", "-m", "pytest", "{posargs:--runslow}"]]

[tool.tox.env.clean]
description = "Remove previous coverage reports"
skip_install = true
commands = [["coverage", "erase"]]

[tool.tox.env.lint]
description = "Run linters"
skip_install = true
commands = [
    ["ruff", "format", "--check"],
    ["ruff", "check"],
]

[tool.tox.env.type]
description = "Run type checks"
skip_install = true
commands = [["mypy", "."]]

[tool.tox.env.report]
description = "Generate coverage report"
skip_install = true
commands =[
    ["coverage", "html", "--fail-under=0"],
    ["coverage", "report"],
]

